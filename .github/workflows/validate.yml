name: Validate NixOS Configuration

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v25

      - name: Validate flake
        run: nix flake check

      - name: Evaluate all NixOS configurations
        run: |
          echo "üîç Evaluating all NixOS configurations..."
          
          # Get all NixOS configuration names
          CONFIGS=$(nix flake show --json | jq -r '.nixosConfigurations | keys[]' 2>/dev/null || echo "")
          
          if [ -z "$CONFIGS" ]; then
            echo "‚ö†Ô∏è  No NixOS configurations found in flake"
            exit 0
          fi
          
          # Evaluate each configuration
          for config in $CONFIGS; do
            echo "Evaluating configuration: $config"
            if nix eval .#nixosConfigurations.$config.config.system.build.toplevel --json > /dev/null; then
              echo "‚úÖ $config evaluated successfully"
            else
              echo "‚ùå $config failed to evaluate"
              exit 1
            fi
          done
          
          echo "üéâ All configurations evaluated successfully!"

      - name: Show flake structure
        run: |
          echo "üìã Flake structure:"
          nix flake show || echo "Could not show flake structure"
          
          echo -e "\nüìã Available NixOS configurations:"
          nix flake show --json | jq -r '.nixosConfigurations | keys[]' || echo "No NixOS configurations found"

      - name: Build all NixOS configurations
        run: |
          echo "üî® Building all NixOS configurations..."
          
          # Get all NixOS configuration names
          CONFIGS=$(nix flake show --json | jq -r '.nixosConfigurations | keys[]' 2>/dev/null || echo "")
          
          if [ -z "$CONFIGS" ]; then
            echo "‚ö†Ô∏è  No NixOS configurations found in flake"
            exit 0
          fi
          
          # Build each configuration
          for config in $CONFIGS; do
            echo "Building configuration: $config"
            if nix build .#nixosConfigurations.$config.config.system.build.toplevel --dry-run; then
              echo "‚úÖ $config built successfully"
            else
              echo "‚ùå $config failed to build"
              exit 1
            fi
          done
          
          echo "üéâ All configurations built successfully!"

      - name: Build other flake outputs
        run: |
          echo "üî® Building other flake outputs..."
          
          # Get all available outputs
          ALL_OUTPUTS=$(nix flake show --json | jq -r 'keys[]' 2>/dev/null || echo "")
          
          for output_type in $ALL_OUTPUTS; do
            echo "Checking output type: $output_type"
            
            # Skip nixosConfigurations as we already built them
            if [ "$output_type" = "nixosConfigurations" ]; then
              continue
            fi
            
            # Get outputs of this type
            OUTPUTS=$(nix flake show --json | jq -r ".$output_type | keys[]" 2>/dev/null || echo "")
            
            if [ -n "$OUTPUTS" ]; then
              echo "Building $output_type outputs:"
              for output in $OUTPUTS; do
                echo "  Building: $output_type.$output"
                if nix build .#$output_type.$output --dry-run 2>/dev/null; then
                  echo "  ‚úÖ $output_type.$output built successfully"
                else
                  echo "  ‚ö†Ô∏è  $output_type.$output failed to build (may not be buildable)"
                fi
              done
            fi
          done
