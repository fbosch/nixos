name: Validate

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}-validate
  cancel-in-progress: true

env:
  NIX_CONFIG: "extra-experimental-features = nix-command flakes"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v12

      - name: Enable Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Lint
        run: |
          nix-shell -p statix deadnix --run 'set -euo pipefail

            echo "::group::Statix"
            statix check .
            echo "::endgroup::"

            echo "::group::Deadnix"
            deadnix --fail --no-lambda-pattern-names .
            echo "::endgroup::"'

      - name: Flake checks
        run: nix flake check --print-build-logs --keep-going

      - name: Evaluate and build flake outputs
        run: |
          nix-shell -p jq --run 'set -euo pipefail

            mapfile -t configs < <(nix eval --json .#nixosConfigurations | jq -r "keys[]" 2>/dev/null || true)
            if [ ${#configs[@]} -eq 0 ]; then
              echo "No NixOS configurations found."
            else
              echo "Configurations: ${configs[*]}"
              for cfg in "${configs[@]}"; do
                echo "Evaluating ${cfg}"
                nix eval ".#nixosConfigurations.${cfg}.config.system.build.toplevel" --json > /dev/null
              done
              for cfg in "${configs[@]}"; do
                echo "Dry-run build ${cfg}"
                nix build ".#nixosConfigurations.${cfg}.config.system.build.toplevel" --dry-run --print-build-logs
              done
            fi

            mapfile -t categories < <(nix flake show --json | jq -r "keys[]")
            for category in "${categories[@]}"; do
              [ "$category" = "nixosConfigurations" ] && continue
              mapfile -t outputs < <(nix flake show --json | jq -r ".${category} | keys[]" 2>/dev/null || true)
              for output in "${outputs[@]}"; do
                echo "Dry-run build ${category}.${output}"
                nix build ".#${category}.${output}" --dry-run --print-build-logs || true
              done
            done'
