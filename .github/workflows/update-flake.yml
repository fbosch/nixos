name: Update Flake Inputs

on:
  schedule:
    # Run every Monday at 2 AM UTC
    - cron: "0 2 * * 1"
  workflow_dispatch:

jobs:
  update-flake:
    name: Update Flake Inputs
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Install Nix
        uses: cachix/install-nix-action@v25

      - name: Update flake inputs and capture changes
        id: update-flake
        run: |
          echo "ðŸ”„ Updating flake inputs..."

          # Capture the output of nix flake update
          UPDATE_OUTPUT=$(nix flake update 2>&1)
          echo "$UPDATE_OUTPUT"

          # Check if flake.lock was modified
          if [ -n "$(git status --porcelain flake.lock)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            
            # Parse the update output to extract input names and version changes
            echo "ðŸ“‹ Analyzing changes..."
            
            # Create a temporary file to build the detailed changes
            DETAILED_CHANGES=""
            INPUT_COUNT=0
            
            # Parse each "â€¢ Updated input" section
            while IFS= read -r line; do
              if [[ "$line" =~ "â€¢ Updated input '" ]]; then
                # Extract input name
                INPUT_NAME=$(echo "$line" | sed "s/â€¢ Updated input '//" | sed "s/':.*//")
                
                # Read the next few lines to get version info
                FROM_VERSION=""
                TO_VERSION=""
                
                # Look for the version lines in the next few lines
                for i in {1..5}; do
                  NEXT_LINE=$(echo "$UPDATE_OUTPUT" | grep -A $i "â€¢ Updated input '$INPUT_NAME'" | tail -n +2 | sed -n "${i}p")
                  
                  if [[ "$NEXT_LINE" =~ "â†’" ]]; then
                    # This is the "to" version line
                    TO_VERSION=$(echo "$NEXT_LINE" | sed 's/.*â†’ //' | sed 's/ (.*//')
                    break
                  elif [[ "$NEXT_LINE" =~ "github:" ]] || [[ "$NEXT_LINE" =~ "git+" ]]; then
                    # This is the "from" version line
                    FROM_VERSION=$(echo "$NEXT_LINE" | sed 's/.*â†’ //' | sed 's/ (.*//' | sed 's/^[[:space:]]*//')
                  fi
                done
                
                # If we couldn't parse versions, use revision hashes as fallback
                if [[ -z "$FROM_VERSION" ]] || [[ -z "$TO_VERSION" ]]; then
                  FROM_REV=$(echo "$UPDATE_OUTPUT" | grep -A 3 "â€¢ Updated input '$INPUT_NAME'" | grep -v "â€¢ Updated input" | grep -v "â†’" | head -1 | sed 's/.*\///' | sed 's/ (.*//' | cut -c1-8)
                  TO_REV=$(echo "$UPDATE_OUTPUT" | grep -A 3 "â€¢ Updated input '$INPUT_NAME'" | grep "â†’" | sed 's/.*\///' | sed 's/ (.*//' | cut -c1-8)
                  FROM_VERSION="${FROM_REV:-unknown}"
                  TO_VERSION="${TO_REV:-unknown}"
                fi
                
                # Add to detailed changes
                DETAILED_CHANGES="${DETAILED_CHANGES}- \`${INPUT_NAME}\`\n   \`\`\`diff\n        - ${FROM_VERSION}\n        + ${TO_VERSION}\n   \`\`\`\n"
                INPUT_COUNT=$((INPUT_COUNT + 1))
              fi
            done <<< "$(echo "$UPDATE_OUTPUT" | grep "â€¢ Updated input")"
            
            # Create simple comma-separated list for backward compatibility
            UPDATED_INPUTS=$(echo "$UPDATE_OUTPUT" | grep "â€¢ Updated input" | sed "s/â€¢ Updated input '//" | sed "s/':.*//" | tr '\n' ', ' | sed 's/,$//')
            
            if [ -n "$UPDATED_INPUTS" ] && [ "$INPUT_COUNT" -gt 0 ]; then
              echo "updated_inputs=$UPDATED_INPUTS" >> $GITHUB_OUTPUT
              echo "input_count=$INPUT_COUNT" >> $GITHUB_OUTPUT
              echo "detailed_changes<<EOF" >> $GITHUB_OUTPUT
              echo -e "$DETAILED_CHANGES" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "updated_inputs=flake.lock" >> $GITHUB_OUTPUT
              echo "input_count=1" >> $GITHUB_OUTPUT
              echo "detailed_changes=- \`flake.lock\`\n   \`\`\`diff\n        - previous version\n        + updated version\n   \`\`\`" >> $GITHUB_OUTPUT
            fi
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.update-flake.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: |
            Update flake inputs

            ${{ steps.update-flake.outputs.detailed_changes }}

            Co-authored-by: GitHub Actions <actions@github.com>
          title: "Update flake inputs: ${{ steps.update-flake.outputs.input_count }} packages updated"
          body: |
            This PR updates flake inputs to their latest versions.

            **Updated inputs:**
            ${{ steps.update-flake.outputs.detailed_changes }}

            **Summary:**
            - Updated ${{ steps.update-flake.outputs.input_count }} packages: ${{ steps.update-flake.outputs.updated_inputs }}
            - Updated flake.lock with latest input versions

          branch: update-flake-inputs
          delete-branch: true
