name: Update Flake Inputs

on:
  schedule:
    # Run every Monday at 2 AM UTC
    - cron: "0 2 * * 1"
  workflow_dispatch:

jobs:
  update-flake:
    name: Update Flake Inputs
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Install Nix
        uses: cachix/install-nix-action@v25

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Update flake inputs and capture changes
        id: update-flake
        run: |
          echo "ðŸ”„ Updating flake inputs..."

          # Capture the output of nix flake update
          UPDATE_OUTPUT=$(nix flake update 2>&1)
          echo "$UPDATE_OUTPUT"

          # Check if flake.lock was modified
          if [ -n "$(git status --porcelain flake.lock)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            
            # Parse the update output to extract input names and version changes
            echo "ðŸ“‹ Analyzing changes..."
            
            # Create a temporary file to build the detailed changes
            DETAILED_CHANGES=""
            INPUT_COUNT=0
            
            # Parse each "â€¢ Updated input" section
            while IFS= read -r line; do
              if [[ "$line" =~ "â€¢ Updated input '" ]]; then
                # Extract input name
                INPUT_NAME=$(echo "$line" | sed "s/â€¢ Updated input '//" | sed "s/':.*//")
                
                # Get version information from flake.lock
                FROM_VERSION=""
                TO_VERSION=""
                
                # Extract repository info from flake.lock
                REPO_OWNER=$(jq -r ".nodes.\"${INPUT_NAME}\".locked.owner // empty" flake.lock 2>/dev/null)
                REPO_NAME=$(jq -r ".nodes.\"${INPUT_NAME}\".locked.repo // empty" flake.lock 2>/dev/null)
                REPO_TYPE=$(jq -r ".nodes.\"${INPUT_NAME}\".locked.type // empty" flake.lock 2>/dev/null)
                ORIGINAL_REF=$(jq -r ".nodes.\"${INPUT_NAME}\".original.ref // empty" flake.lock 2>/dev/null)
                
                # Get commit hashes from the update output
                FROM_REV=$(echo "$UPDATE_OUTPUT" | grep -A 3 "â€¢ Updated input '$INPUT_NAME'" | grep -v "â€¢ Updated input" | grep -v "â†’" | head -1 | sed 's/.*\///' | sed 's/ (.*//' | cut -c1-8)
                TO_REV=$(echo "$UPDATE_OUTPUT" | grep -A 3 "â€¢ Updated input '$INPUT_NAME'" | grep "â†’" | sed 's/.*\///' | sed 's/ (.*//' | cut -c1-8)
                
                # Use original.ref if it's meaningful (like "nixos-unstable", "nixos-24.11")
                if [[ -n "$ORIGINAL_REF" ]] && [[ "$ORIGINAL_REF" != "master" ]] && [[ "$ORIGINAL_REF" != "main" ]]; then
                  FROM_VERSION="$ORIGINAL_REF"
                  TO_VERSION="$ORIGINAL_REF"
                fi
                
                # Fall back to commit hashes
                if [[ -z "$FROM_VERSION" ]]; then
                  FROM_VERSION="${FROM_REV:-unknown}"
                  TO_VERSION="${TO_REV:-unknown}"
                fi
                
                # Add to detailed changes with links and changelog
                if [[ "$REPO_TYPE" == "github" ]] && [[ -n "$REPO_OWNER" ]] && [[ -n "$REPO_NAME" ]]; then
                  PACKAGE_LINK="[${INPUT_NAME}](https://github.com/${REPO_OWNER}/${REPO_NAME})"
                  
                  # Try to get changelog information
                  CHANGELOG_INFO=""
                  if command -v curl >/dev/null 2>&1; then
                    # Get the full commit hashes
                    FROM_FULL_REV=$(echo "$UPDATE_OUTPUT" | grep -A 3 "â€¢ Updated input '$INPUT_NAME'" | grep -v "â€¢ Updated input" | grep -v "â†’" | head -1 | sed 's/.*\///' | sed 's/ (.*//')
                    TO_FULL_REV=$(echo "$UPDATE_OUTPUT" | grep -A 3 "â€¢ Updated input '$INPUT_NAME'" | grep "â†’" | sed 's/.*\///' | sed 's/ (.*//')
                    
                    if [[ -n "$FROM_FULL_REV" ]] && [[ -n "$TO_FULL_REV" ]] && [[ "$FROM_FULL_REV" != "$TO_FULL_REV" ]]; then
                      # Try to get commit messages between the two revisions
                      COMMITS=$(curl -s "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/compare/${FROM_FULL_REV}...${TO_FULL_REV}" | jq -r '.commits[]?.commit.message' 2>/dev/null | head -5)
                      
                      if [[ -n "$COMMITS" ]] && [[ "$COMMITS" != "null" ]]; then
                        CHANGELOG_INFO="\n  <details>\n  <summary>ðŸ“‹ Recent changes</summary>\n\n"
                        while IFS= read -r commit_msg; do
                          if [[ -n "$commit_msg" ]] && [[ "$commit_msg" != "null" ]]; then
                            # Clean up commit message (remove newlines, limit length)
                            CLEAN_MSG=$(echo "$commit_msg" | tr '\n' ' ' | sed 's/^[[:space:]]*//' | cut -c1-80)
                            if [[ ${#CLEAN_MSG} -eq 80 ]]; then
                              CLEAN_MSG="${CLEAN_MSG}..."
                            fi
                            CHANGELOG_INFO="${CHANGELOG_INFO}  - ${CLEAN_MSG}\n"
                          fi
                        done <<< "$COMMITS"
                        CHANGELOG_INFO="${CHANGELOG_INFO}\n  </details>"
                      fi
                    fi
                  fi
                else
                  PACKAGE_LINK="\`${INPUT_NAME}\`"
                fi
                
                DETAILED_CHANGES="${DETAILED_CHANGES}- ${PACKAGE_LINK}\n\`\`\`diff\n-${FROM_VERSION}\n+${TO_VERSION}\n\`\`\`${CHANGELOG_INFO}\n"
                INPUT_COUNT=$((INPUT_COUNT + 1))
              fi
            done <<< "$(echo "$UPDATE_OUTPUT" | grep "â€¢ Updated input")"
            
            # Create simple comma-separated list for backward compatibility
            UPDATED_INPUTS=$(echo "$UPDATE_OUTPUT" | grep "â€¢ Updated input" | sed "s/â€¢ Updated input '//" | sed "s/':.*//" | tr '\n' ', ' | sed 's/,$//')
            
            if [ -n "$UPDATED_INPUTS" ] && [ "$INPUT_COUNT" -gt 0 ]; then
              echo "updated_inputs=$UPDATED_INPUTS" >> $GITHUB_OUTPUT
              echo "input_count=$INPUT_COUNT" >> $GITHUB_OUTPUT
              echo "detailed_changes<<EOF" >> $GITHUB_OUTPUT
              echo -e "$DETAILED_CHANGES" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "updated_inputs=flake.lock" >> $GITHUB_OUTPUT
              echo "input_count=1" >> $GITHUB_OUTPUT
              echo "detailed_changes=- \`flake.lock\`\n\`\`\`diff\n-previous version\n+updated version\n\`\`\`" >> $GITHUB_OUTPUT
            fi
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.update-flake.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: |
            Update flake inputs

            ${{ steps.update-flake.outputs.detailed_changes }}

            Co-authored-by: GitHub Actions <actions@github.com>
          title: "Update flake inputs: ${{ steps.update-flake.outputs.input_count }} packages updated"
          body: |
            This PR updates flake inputs to their latest versions.

            **Updated inputs:**
            ${{ steps.update-flake.outputs.detailed_changes }}

            **Summary:**
            - Updated ${{ steps.update-flake.outputs.input_count }} packages: ${{ steps.update-flake.outputs.updated_inputs }}
            - Updated flake.lock with latest input versions

          branch: update-flake-inputs
          delete-branch: true
