name: Security
on:
  push:
    branches: [main, master]
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *" # daily

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NIX_CONFIG: "extra-experimental-features = nix-command flakes"

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v12

      - name: Enable Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8

      - name: Lint + build + scan all hosts
        run: |
          nix-shell -p treefmt nixfmt-rfc-style shfmt nodePackages.prettier statix deadnix gitleaks vulnix jq \
            --run 'set -euo pipefail

              echo "::group::Formatting"
              treefmt --no-cache --ci
              echo "::endgroup::"

              echo "::group::Statix"
              statix check .
              echo "::endgroup::"

              echo "::group::Deadnix"
              deadnix --fail --no-lambda-pattern-names .
              echo "::endgroup::"

              echo "::group::Gitleaks"
              gitleaks detect --no-banner --redact
              echo "::endgroup::"

              echo "::group::Flake check"
              nix flake check --print-build-logs --keep-going
              echo "::endgroup::"

              mapfile -t HOSTS < <(nix eval --json .#nixosConfigurations | jq -r "keys[]")
              echo "Hosts: ${HOSTS[*]}"

              for h in "${HOSTS[@]}"; do
                echo "::group::Build $h"
                out="result-$h"
                nix build ".#nixosConfigurations.${h}.config.system.build.toplevel" -o "$out" --print-build-logs
                rp=$(readlink -f "$out")
                echo "Built $h -> $rp"
                echo "::endgroup::"

                echo "::group::CVE scan $h"
                vulnix "$rp"
                echo "::endgroup::"
              done
            '
