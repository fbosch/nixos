name: Security
on:
  push:
    branches: [main, master]
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *" # daily

permissions:
  contents: read
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NIX_CONFIG: "extra-experimental-features = nix-command flakes"

jobs:
  secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Secrets scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  scan-nixos:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        host: [rvn-vm]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - uses: DeterminateSystems/nix-installer-action@v12
        with:
          extra-args: --prefer-upstream-nix
      - uses: DeterminateSystems/magic-nix-cache-action@v8
        with:
          use-flakehub: false

      - name: Build and capture store path
        id: build
        run: echo "out=$(nix build .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel --print-out-paths)" >> "$GITHUB_OUTPUT"

      - name: Run vulnix on store path
        env:
          LANG: C.UTF-8
        run: |
          # Check if whitelist exists
          WHITELIST_ARG=""
          if [ -f ".vulnix-whitelist.toml" ]; then
            WHITELIST_ARG="--whitelist .vulnix-whitelist.toml"
          fi
          
          # Run vulnix
          nix run github:nix-community/vulnix -- --json $WHITELIST_ARG "${{ steps.build.outputs.out }}" > vulnix.json || true
          
          # Count total vulnerabilities
          total_count=$(jq 'length' vulnix.json)
          echo "Found $total_count total vulnerabilities"
          
          # Count high-severity vulnerabilities (CVSS >= 7.0)
          high_severity_count=$(jq '[ .[] | select( ([.cvssv3_basescore[]]|max) >= 7 ) ] | length' vulnix.json)
          echo "Found $high_severity_count high-severity vulnerabilities (CVSS >= 7.0)"
          
          # Display summary
          echo "### 🔒 Vulnerability Summary for ${{ matrix.host }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total vulnerabilities | $total_count |" >> $GITHUB_STEP_SUMMARY
          echo "| **High severity (CVSS ≥ 7.0)** | **$high_severity_count** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$high_severity_count" != "0" ]; then
            echo "## ⚠️ High Severity Vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            jq -r '[ .[] | select( ([.cvssv3_basescore[]]|max) >= 7 ) ] | .[] | 
              "- **\(.name)** v\(.version): \(.affected_by | join(", ")) (CVSS: \([.cvssv3_basescore[]]|max))"' \
              vulnix.json >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Actions:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Run \`nix flake update\` to get latest package versions" >> $GITHUB_STEP_SUMMARY
            echo "2. Review each CVE to verify it applies to your configuration" >> $GITHUB_STEP_SUMMARY
            echo "3. Add false positives to \`.vulnix-whitelist.toml\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No high-severity vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Fail build if high-severity vulnerabilities found
          if ! jq '[ .[] | select( ([.cvssv3_basescore[]]|max) >= 7 ) ] | length' vulnix.json | grep -qx 0; then
            echo "::error::Found $high_severity_count high-severity vulnerabilities (CVSS >= 7.0)"
            exit 1
          fi

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnix-report-${{ matrix.host }}
          path: vulnix.json
